/*******************************************************************************
 * COPYRIGHT Ericsson 2021
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.ae.repositories;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.Arrays;
import java.util.List;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.EntityTransaction;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.transaction.annotation.Transactional;

import com.ericsson.oss.ae.model.entity.AppInstance;
import com.ericsson.oss.ae.model.entity.ArtifactInstance;

@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)
@ExtendWith(SpringExtension.class)
@SpringBootTest
public class ArtifactInstanceRepositoryTest {

    @Autowired
    ArtifactInstanceRepository objectUnderTest;

    @Autowired
    AppInstanceRepository appInstanceRepository;

    @Autowired
    EntityManagerFactory entityManagerFactory;

    @BeforeEach
    void resetRepositoryAutoGeneratedIdForAppInstanceRepositoryAndArtifactInstanceRepository() {
        final EntityManager entityManager = entityManagerFactory.createEntityManager();

        final EntityTransaction entityTransaction = entityManager.getTransaction();
        entityTransaction.begin();
        entityManager.createNativeQuery("ALTER TABLE app_instance ALTER COLUMN id RESTART WITH 1").executeUpdate();
        entityManager.createNativeQuery("ALTER TABLE artifact_instance ALTER COLUMN id RESTART WITH 1").executeUpdate();
        entityTransaction.commit();
    }

    @Transactional
    @Test
    public void givenAValidArtifactInstanceObject_WhenSavingArtifactInstanceToDatabase_ThenArtifactInstancePersistedInDbWithCorrectData() {
        objectUnderTest.save(ArtifactInstance.builder().appOnBoardingArtifactId(2L).build());

        final ArtifactInstance actualArtifactInstance = objectUnderTest.findById(1L).orElse(null);

        assertThat(actualArtifactInstance).isNotNull();
        assertThat(actualArtifactInstance.getAppOnBoardingArtifactId()).isEqualTo(2L);
    }

    @Transactional
    @Test
    public void givenDatabaseContainsValidArtifactInstances_WhenFindingAllArtifactInstances_ThenReturnAllArtifactInstancesWithCorrectData() {
        objectUnderTest.saveAll(Arrays.asList(ArtifactInstance.builder().appOnBoardingArtifactId(2L).build(),
                ArtifactInstance.builder().appOnBoardingArtifactId(4L).build(), ArtifactInstance.builder().appOnBoardingArtifactId(6L).build()));

        final List<ArtifactInstance> actualArtifactInstances = objectUnderTest.findAll();

        assertThat(actualArtifactInstances.get(0).getId()).isEqualTo(1L);
        assertThat(actualArtifactInstances.get(0).getAppOnBoardingArtifactId()).isEqualTo(2L);
        assertThat(actualArtifactInstances.get(1).getId()).isEqualTo(2L);
        assertThat(actualArtifactInstances.get(1).getAppOnBoardingArtifactId()).isEqualTo(4L);
        assertThat(actualArtifactInstances.get(2).getId()).isEqualTo(3L);
        assertThat(actualArtifactInstances.get(2).getAppOnBoardingArtifactId()).isEqualTo(6L);
    }

    @Transactional
    @Test
    public void givenDatabaseContainsNoArtifactInstances_WhenFindingArtifactInstanceById_ThenReturnNullFromDb() {
        final ArtifactInstance actualArtifactInstance = objectUnderTest.findById(1L).orElse(null);

        assertThat(actualArtifactInstance).isNull();
    }

    @Transactional
    @Test
    public void givenDatabaseContainsNoArtifactInstances_WhenFindingAllArtifactInstances_ThenReturnArtifactInstanceListOfSizeZero() {
        assertThat(objectUnderTest.findAll().size()).isZero();
    }

    @Transactional
    @Test
    public void givenDatabaseContainsASingleArtifactInstance_WhenDeleteArtifactInstanceById_ThenDatabaseContainsNoPersistedArtifactInstances() {
        objectUnderTest.save(ArtifactInstance.builder().appOnBoardingArtifactId(2L).build());
        assertThat(objectUnderTest.findAll().size()).isOne();

        objectUnderTest.deleteById(1L);

        assertThat(objectUnderTest.findAll().size()).isZero();
    }

    @Transactional
    @Test
    public void givenAppInstanceDatabaseAndArtifactInstanceDatabaseBothContainAValidObject_WhenFindingArtifactInstanceByAppInstanceIdAndId_ThenReturnArtifactInstanceWithCorrectData() {
        final AppInstance appInstance = AppInstance.builder().id(1L).build();
        appInstanceRepository.save(appInstance);
        appInstanceRepository.flush();

        objectUnderTest.save(ArtifactInstance.builder().appOnBoardingArtifactId(2L).statusMessage("statusMessage").operationId("operationId")
                .appInstance(appInstance).build());

        final ArtifactInstance actualArtifactInstance = objectUnderTest.findByAppInstanceIdAndId(1L, 1L).orElse(null);

        assertThat(actualArtifactInstance).isNotNull();
        assertThat(actualArtifactInstance.getAppInstance().getId()).isEqualTo(1L);
        assertThat(actualArtifactInstance.getId()).isEqualTo(1L);
        assertThat(actualArtifactInstance.getAppOnBoardingArtifactId()).isEqualTo(2L);
        assertThat(actualArtifactInstance.getOperationId()).isEqualTo("operationId");
        assertThat(actualArtifactInstance.getStatusMessage()).isEqualTo("statusMessage");
    }

    @Transactional
    @Test
    public void givenAppInstanceAndArtifactInstanceDatabasesBothContainObjects_WhenFindAllArtifactInstancesByAppInstanceId_ThenReturnArtifactInstancesWithCorrectData() {
        final AppInstance appInstance = AppInstance.builder().id(1L).build();
        appInstanceRepository.save(appInstance);

        objectUnderTest.saveAll(Arrays.asList(ArtifactInstance.builder().appOnBoardingArtifactId(2L).appInstance(appInstance).build(),
                ArtifactInstance.builder().appOnBoardingArtifactId(2L).appInstance(appInstance).build(),
                ArtifactInstance.builder().appOnBoardingArtifactId(2L).appInstance(appInstance).build()));

        final List<ArtifactInstance> actualArtifactInstances = objectUnderTest.findAllArtifactInstancesByAppInstanceId(1L).orElse(null);

        assertThat(actualArtifactInstances).isNotNull();
        assertThat(actualArtifactInstances.size()).isEqualTo(3);
        assertThat(actualArtifactInstances.get(0).getId()).isEqualTo(1L);
        assertThat(actualArtifactInstances.get(1).getId()).isEqualTo(2L);
        assertThat(actualArtifactInstances.get(2).getId()).isEqualTo(3L);
    }
}
