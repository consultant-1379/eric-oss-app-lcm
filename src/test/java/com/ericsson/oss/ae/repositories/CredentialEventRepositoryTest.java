/*******************************************************************************
 * COPYRIGHT Ericsson 2021
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.ae.repositories;

import com.ericsson.oss.ae.model.entity.CredentialEvent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.EntityTransaction;

import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;

@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)
@ExtendWith(SpringExtension.class)
@SpringBootTest
public class CredentialEventRepositoryTest {

    @Autowired
    CredentialEventRepository objectUnderTest;

    @Autowired
    EntityManagerFactory entityManagerFactory;

    @BeforeEach
    void resetRepositoryAutoGeneratedIdForAppInstanceRepository() {
        final EntityManager entityManager = entityManagerFactory.createEntityManager();

        final EntityTransaction entityTransaction = entityManager.getTransaction();
        entityTransaction.begin();
        entityManager.createNativeQuery("ALTER TABLE credential_event ALTER COLUMN id RESTART WITH 1").executeUpdate();
        entityTransaction.commit();
    }

    @Transactional
    @Test
    public void givenAValidAppInstanceObject_WhenSavingAppInstanceToDatabase_ThenAppInstancePersistedInDbWithCorrectData() {
        objectUnderTest.save(CredentialEvent.builder().appOnBoardingAppId(2L).build());

        final CredentialEvent actualCredentialEventAppInstance = objectUnderTest.findByAppOnBoardingAppId(2L);

        assertThat(actualCredentialEventAppInstance).isNotNull();
        assertThat(actualCredentialEventAppInstance.getId()).isEqualTo(1L);
        assertThat(actualCredentialEventAppInstance.getAppOnBoardingAppId()).isEqualTo(2L);
    }



    @Transactional
    @Test
    public void givenDatabaseContainsNoAppInstances_WhenFindingAppInstanceById_ThenRepositoryReturnsNull() {
        final CredentialEvent actualCredentialEventAppInstance = objectUnderTest.findById(2L).orElse(null);

        assertThat(actualCredentialEventAppInstance).isNull();
    }



    @Transactional
    @Test
    public void givenDatabaseContainsNoAppInstances_WhenFindingAllAppInstances_ThenReturnAppInstanceListOfSizeZero() {
        assertThat(objectUnderTest.findAll().size()).isZero();
    }

    @Transactional
    @Test
    public void givenDatabaseContainsASingleAppInstance_WhenDeleteAppInstanceById_ThenDatabaseContainsNoPersistedAppInstances() {
        objectUnderTest.save(CredentialEvent.builder().appOnBoardingAppId(2L).build());
        assertThat(objectUnderTest.findAll().size()).isOne();

        objectUnderTest.deleteById(1L);
        assertThat(objectUnderTest.findAll().size()).isZero();
    }

}
